package com.clinicboard.user_service.architecture;

import com.tngtech.archunit.core.domain.JavaClasses;
import com.tngtech.archunit.core.importer.ClassFileImporter;
import com.tngtech.archunit.lang.ArchRule;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.*;

/**
 * üß¨ FITNESS FUNCTIONS para Domain-Driven Design
 * 
 * Baseado nos princ√≠pios de Vlad Khononov em "Learning Domain-Driven Design"
 * e Eric Evans em "Domain-Driven Design: Tackling Complexity in the Heart of Software"
 * 
 * Detecta viola√ß√µes de:
 * - Aggregate Roots
 * - Value Objects  
 * - Domain Services
 * - Domain Events
 * - Ubiquitous Language
 * - Bounded Contexts
 * - Anti-Corruption Layers
 */
@DisplayName("üî• DOMAIN-DRIVEN DESIGN - Fitness Functions")
class DomainDrivenDesignFitnessTest {

    private JavaClasses classes;

    @BeforeEach
    void setUp() {
        classes = new ClassFileImporter().importPackages("com.clinicboard.user_service");
    }

    // ==================== VALUE OBJECTS ====================

    @Test
    @DisplayName("üö® DDD CRITICAL: Value Objects devem ser imut√°veis")
    void valueObjectsMustBeImmutable() {
        ArchRule rule = classes()
                .that().resideInAPackage("..domain.model..")
                .and().haveNameMatching(".*Email|.*Password|.*ContactInfo|.*UserId")
                .should().haveOnlyFinalFields()
                .because("VALUE OBJECTS DEVEM SER IMUT√ÅVEIS - DDD PRINC√çPIO FUNDAMENTAL");

        rule.check(classes);
    }

    @Test
    @DisplayName("üö® DDD CRITICAL: Value Objects n√£o devem ter setters")
    void valueObjectsMustNotHaveSetters() {
        ArchRule rule = noMethods()
                .that().areDeclaredInClassesThat().resideInAPackage("..domain.model..")
                .and().areDeclaredInClassesThat().haveNameMatching(".*Email|.*Password|.*ContactInfo|.*UserId")
                .should().haveNameMatching("set.*")
                .because("VALUE OBJECTS S√ÉO IMUT√ÅVEIS - N√ÉO DEVEM TER SETTERS");

        rule.check(classes);
    }

    @Test
    @DisplayName("üö® DDD CRITICAL: Value Objects devem estar no dom√≠nio")
    void valueObjectsMustBeInDomain() {
        ArchRule rule = classes()
                .that().haveNameMatching(".*Email|.*Password|.*ContactInfo|.*UserId")
                .should().resideInAPackage("..domain.model..")
                .because("VALUE OBJECTS PERTENCEM AO DOM√çNIO");

        rule.check(classes);
    }

    // ==================== DOMAIN SERVICES ====================

    @Test
    @DisplayName("üö® DDD CRITICAL: Domain Services devem estar no dom√≠nio")
    void domainServicesMustBeInDomain() {
        ArchRule rule = classes()
                .that().haveNameMatching(".*DomainService")
                .should().resideInAPackage("..domain.service..")
                .because("DOMAIN SERVICES PERTENCEM AO DOM√çNIO");

        rule.check(classes);
    }

    // ==================== DOMAIN EVENTS ====================

    @Test
    @DisplayName("üö® DDD CRITICAL: Domain Events devem estar no dom√≠nio")
    void domainEventsMustBeInDomain() {
        ArchRule rule = classes()
                .that().haveNameMatching(".*Event|.*DomainEvent")
                .should().resideInAPackage("..domain.event..")
                .because("DOMAIN EVENTS PERTENCEM AO DOM√çNIO");

        rule.check(classes);
    }

    @Test
    @DisplayName("üö® DDD CRITICAL: Domain Events devem ser imut√°veis")
    void domainEventsMustBeImmutable() {
        ArchRule rule = classes()
                .that().resideInAPackage("..domain.event..")
                .should().haveOnlyFinalFields()
                .because("DOMAIN EVENTS DEVEM SER IMUT√ÅVEIS");

        rule.check(classes);
    }

    // ==================== BUSINESS EXCEPTIONS ====================

    @Test
    @DisplayName("üö® DDD CRITICAL: Business Exceptions devem estar no dom√≠nio")
    void businessExceptionsMustBeInDomain() {
        ArchRule rule = classes()
                .that().haveNameMatching(".*BusinessException")
                .should().resideInAPackage("..domain.exception..")
                .because("BUSINESS EXCEPTIONS REPRESENTAM VIOLA√á√ïES DE REGRAS DE NEG√ìCIO");

        rule.check(classes);
    }

    @Test
    @DisplayName("üö® DDD CRITICAL: Business Exceptions devem herdar de RuntimeException")
    void businessExceptionsMustInheritFromRuntimeException() {
        ArchRule rule = classes()
                .that().resideInAPackage("..domain.exception..")
                .should().beAssignableTo(RuntimeException.class)
                .because("BUSINESS EXCEPTIONS DEVEM SER UNCHECKED");

        rule.check(classes);
    }

    // ==================== UBIQUITOUS LANGUAGE ====================

    @Test
    @DisplayName("üö® DDD CRITICAL: Classes do dom√≠nio devem usar linguagem ub√≠qua")
    void domainClassesMustUseUbiquitousLanguage() {
        ArchRule rule = classes()
                .that().resideInAPackage("..domain..")
                .should().haveNameNotMatching(".*Data|.*Info|.*Dto|.*Entity|.*Model")
                .because("DOM√çNIO DEVE USAR LINGUAGEM UB√çQUA - N√ÉO TERMOS T√âCNICOS");

        rule.check(classes);
    }

    // ==================== BOUNDED CONTEXT INTEGRITY ====================

    @Test
    @DisplayName("üö® DDD CRITICAL: Dom√≠nio n√£o pode importar outros bounded contexts")
    void domainMustNotImportOtherBoundedContexts() {
        ArchRule rule = noClasses()
                .that().resideInAPackage("..domain..")
                .should().dependOnClassesThat().resideInAnyPackage(
                    "..business_service..",
                    "..notification_service..",
                    "..gateway.."
                )
                .because("BOUNDED CONTEXTS DEVEM SER INDEPENDENTES");

        rule.check(classes);
    }

    // ==================== ANTI-PATTERNS ====================

    @Test
    @DisplayName("üö® DDD CRITICAL: Value Objects n√£o devem ter identidade")
    void valueObjectsMustNotHaveIdentity() {
        ArchRule rule = noFields()
                .that().areDeclaredInClassesThat().resideInAPackage("..domain.model..")
                .and().areDeclaredInClassesThat().haveNameMatching(".*Email|.*Password|.*ContactInfo")
                .should().haveNameMatching(".*id.*|.*Id")
                .because("VALUE OBJECTS N√ÉO DEVEM TER IDENTIDADE");

        rule.check(classes);
    }

    @Test
    @DisplayName("üö® DDD CRITICAL: Dom√≠nio deve ser o centro da aplica√ß√£o")
    void domainMustBeTheCenterOfApplication() {
        ArchRule rule = classes()
                .that().resideInAPackage("..application..")
                .should().dependOnClassesThat().resideInAPackage("..domain..")
                .because("DOM√çNIO DEVE SER O CENTRO - HEXAGONAL + DDD");

        rule.check(classes);
    }

    // ==================== AGGREGATE DESIGN ====================

    @Test
    @DisplayName("üö® DDD CRITICAL: Aggregate Roots devem estar no dom√≠nio")
    void aggregateRootsMustBeInDomain() {
        ArchRule rule = classes()
                .that().haveNameMatching(".*User.*") // User √© nosso Aggregate Root
                .and().areNotInterfaces()
                .should().resideInAPackage("..domain.model..")
                .because("AGGREGATE ROOTS PERTENCEM AO DOM√çNIO");

        rule.check(classes);
    }

    @Test
    @DisplayName("üö® DDD CRITICAL: Application Exceptions devem estar na aplica√ß√£o")
    void applicationExceptionsMustBeInApplication() {
        ArchRule rule = classes()
                .that().haveNameMatching(".*ApplicationException")
                .should().resideInAPackage("..application.exception..")
                .because("APPLICATION EXCEPTIONS PERTENCEM √Ä CAMADA DE APLICA√á√ÉO");

        rule.check(classes);
    }

    @Test
    @DisplayName("üö® DDD CRITICAL: Infrastructure n√£o deve vazar para o dom√≠nio")
    void infrastructureMustNotLeakIntoDomain() {
        ArchRule rule = noClasses()
                .that().resideInAPackage("..domain..")
                .should().dependOnClassesThat().resideInAPackage("..infrastructure..")
                .because("INFRAESTRUTURA N√ÉO DEVE VAZAR PARA O DOM√çNIO");

        rule.check(classes);
    }

    // ==================== CONSISTENCY & VALIDATION ====================

    @Test
    @DisplayName("üö® DDD CRITICAL: Dom√≠nio deve validar usando suas pr√≥prias exce√ß√µes")
    void domainMustValidateUsingOwnExceptions() {
        ArchRule rule = noClasses()
                .that().resideInAPackage("..domain..")
                .should().dependOnClassesThat().resideInAPackage("..application.exception..")
                .because("DOM√çNIO DEVE SER INDEPENDENTE DA APLICA√á√ÉO");

        rule.check(classes);
    }
}
